<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
  <display-name>Archetype Created Web Application</display-name>

  <!-- 配置监听器,当启动web容器时,会自动去加载你配置的配置文件-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <!--设置配置文件的路径-->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:applicationContext.xml,classpath:register.xml</param-value>
<!--   -->
  </context-param>

  <!-- 前端控制器（加载classpath:springmvc.xml 服务器启动创建servlet） -->
  <servlet>
    <servlet-name>dispatcherServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!-- 配置初始化参数，创建完DispatcherServlet对象，加载spring-mvc.xml配置文件 -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:springmvc.xml</param-value>
    </init-param>
    <!-- 服务器启动的时候，让DispatcherServlet对象创建 -->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>dispatcherServlet</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <!-- 解决中文乱码过滤器 -->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.html</url-pattern>
       <!-- <url-pattern>*.jsp</url-pattern>-->
        <url-pattern>*.js</url-pattern>
        <url-pattern>*.png</url-pattern>
        <url-pattern>*.css</url-pattern>
        <url-pattern>*.jpg</url-pattern>
        <url-pattern>*.jpeg</url-pattern>
        <url-pattern>*.txt</url-pattern>     
        <url-pattern>*.ttf</url-pattern>     
    </servlet-mapping>

<!--  &lt;!&ndash; 配置跨域过滤器 &ndash;&gt;-->
<!--  <filter>-->
<!--    <filter-name>CORS</filter-name>-->
<!--    <filter-class>com.thetransactioncompany.cors.CORSFilter</filter-class>-->
<!--    <init-param>-->
<!--      <param-name>cors.allowOrigin</param-name>-->
<!--      <param-value>http://127.0.0.1:8848,http://www.hf.com:8848</param-value>-->
<!--    </init-param>-->
<!--    <init-param>-->
<!--      <param-name>cors.supportedMethods</param-name>-->
<!--      &lt;!&ndash; <param-value>*</param-value> &ndash;&gt; &lt;!&ndash; 表示所有请求都有效 &ndash;&gt;-->
<!--      <param-value>GET, POST, HEAD, PUT, DELETE</param-value>-->
<!--    </init-param>-->
<!--    <init-param>-->
<!--      <param-name>cors.supportedHeaders</param-name>-->
<!--      <param-value>Accept, Origin, X-Requested-With, Content-Type, Last-Modified</param-value>-->
<!--    </init-param>-->
<!--    <init-param>-->
<!--      <param-name>cors.exposedHeaders</param-name>-->
<!--      <param-value>Set-Cookie</param-value>-->
<!--    </init-param>-->
<!--    <init-param>-->
<!--      <param-name>cors.supportsCredentials</param-name>-->
<!--      <param-value>true</param-value>-->
<!--    </init-param>-->
<!--  </filter>-->
<!--  <filter-mapping>-->
<!--    <filter-name>CORS</filter-name>-->
<!--    <url-pattern>/*</url-pattern>-->
<!--  </filter-mapping>-->

<!--  cors.allowOrigin指的可以通过的ip，代表所有，可以使用指定的ip，多个的话可以用逗号分隔，默认为 -->
<!--  cors.supportedMethods指的是请求方式 默认为* -->
<!--  cors.supportedHeaders请求支持的头信息，默认为* -->
<!--  cors.exposedHeaders暴露的头信息，默认的empy list -->
<!--  cors.supportsCredentials支持证书，默认为true -->
<!--  cors.maxAge 最大过期时间，默认为-1 -->
<!--  cors.tagRequests 默认为false -->
<!--  cors.allowSubdomains允许子域 默认为false-->

  <!--解决put请求不能自动封装-->
  <filter>
    <filter-name>HttpPutFormContentFilter</filter-name>
    <filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>HttpPutFormContentFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


</web-app>