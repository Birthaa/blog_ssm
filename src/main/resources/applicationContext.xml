<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--fastDfs配置-->
    <!--配置扫描包-->
    <context:component-scan base-package="com.github.tobato.fastdfs.service,com.github.tobato.fastdfs.domain"/>

    <!--配置连接管理器-->
    <bean id="trackerConnectionManager" class="com.github.tobato.fastdfs.conn.TrackerConnectionManager">
        <constructor-arg name="pool" ref="fdfsConnectionPool">
        </constructor-arg>
        <!--配置fastDFS tracker 服务器 ip:port 地址-->
        <property name="trackerList">
            <list>
                <value>***</value>
            </list>
        </property>
    </bean>
    <!--配置连接池-->
    <bean id="fdfsConnectionPool" class="com.github.tobato.fastdfs.conn.FdfsConnectionPool">
        <!--注入连接池配置-->
        <constructor-arg name="config" >
            <bean class="com.github.tobato.fastdfs.conn.ConnectionPoolConfig"/>
        </constructor-arg>
        <!--注入连接池工厂-->
        <constructor-arg name="factory" >
            <bean class="com.github.tobato.fastdfs.conn.PooledConnectionFactory"/>
        </constructor-arg>
    </bean>


    <!-- 不要扫描app包下的Controller类 -->
    <context:component-scan base-package="com.hf">
        <context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation" />
    </context:component-scan>


    <context:property-placeholder location="classpath:*.properties"/>

    <!--邮箱的配置-->
    <bean id="sender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <!-- 主机(QQ的smtp服务器) -->
        <property name="host" value="${email.host}"/>
        <!-- 邮箱名 -->
        <property name="username" value="${email.username}"/>
        <!-- 独立密码 -->
        <property name="password" value="${email.password}"/>
        <property name="defaultEncoding" value="UTF-8" />
        <property name="javaMailProperties">
            <props>
                <!-- 开启身份认证 -->
                <prop key="mail.smtp.auth">true</prop>
                <!-- 使用默认端口 -->
                <prop key="mail.smtp.starttls.enable">true</prop>
                <!-- 设置超时 -->
                <prop key="mail.smtp.timeout">25000</prop>
            </props>
        </property>
    </bean>

    <!-- redis 相关配置 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxWaitMillis" value="${redis.maxWait}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>
    <bean id="JedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}" p:pool-config-ref="poolConfig"/>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="JedisConnectionFactory" />
    </bean>
    <!--
        maxIdle ：最大空闲数
        maxWaitMillis:连接时的最大等待毫秒数
        testOnBorrow：在提取一个jedis实例时，是否提前进行验证操作；如果为true，则得到的jedis实例均是可用的
    -->



    <!--spring整合mybatis-->
    <!-- 阿里 druid 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat" />
    </bean>

    <!--配置SqlSessionFactory工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入一个数据源-->
        <property name="dataSource" ref="dataSource" />

        <!-- 传入PageHelper的插件 -->
        <property name="plugins">
            <array>
                <!-- 传入插件的对象 -->
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <props>
                            <prop key="helperDialect">mysql</prop>
                            <prop key="reasonable">true</prop>
                        </props>
                    </property>
                </bean>
            </array>
        </property>

    </bean>

    <!-- 扫描dao接口，将此包下的接口全部生成代理对象，放入spring IOC 容器中-->
    <bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.hf.dao" />
    </bean>

    <!-- 配置Spring的声明式事务管理 -->
    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>